<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>global-state on Daishi Kato&#39;s blog</title>
    <link>https://blog.axlight.com/tags/global-state/</link>
    <description>Recent content in global-state on Daishi Kato&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Jun 2019 23:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://blog.axlight.com/tags/global-state/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redux meets hooks for non-redux users: a small concrete example with reactive-react-redux</title>
      <link>https://blog.axlight.com/posts/redux-meets-hooks-for-non-redux-users-a-small-concrete-example-with-reactive-react-redux/</link>
      <pubDate>Mon, 03 Jun 2019 23:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/redux-meets-hooks-for-non-redux-users-a-small-concrete-example-with-reactive-react-redux/</guid>
      <description>Introduction If you had already used Redux and loved it, you might not understand why people try using React context and hooks to replace Redux (a.k.a no Redux hype). For those who would think Redux DevTools Extension and middleware are nice to have, Redux and context + hooks are actually two options. Context + hooks is just fine to share state among components, however if apps get bigger, they are likely to require Redux or other similar solutions; otherwise they end up having many contexts that can&amp;rsquo;t be handled very easily.</description>
    </item>
    
    <item>
      <title>Four patterns for global state with React hooks: Context or Redux</title>
      <link>https://blog.axlight.com/posts/four-patterns-for-global-state-with-react-hooks-context-or-redux/</link>
      <pubDate>Mon, 27 May 2019 00:50:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/four-patterns-for-global-state-with-react-hooks-context-or-redux/</guid>
      <description>Introduction Global state or shared state is one of the biggest issues when you start developing a React app. Should we use Redux? Do hooks provide a Redux-like solution? I would like to show four patterns toward using Redux. This is my personal opinion and mainly for new apps.
Pattern 1: Prop passing Some might think it wouldn&amp;rsquo;t scale, but the most basic pattern should still be prop passing. If the app is small enough, define local state in a parent component and simply pass it down to child components.</description>
    </item>
    
    <item>
      <title>Developing React custom hooks for Redux without react-redux</title>
      <link>https://blog.axlight.com/posts/developing-react-custom-hooks-for-redux-without-react-redux/</link>
      <pubDate>Fri, 14 Dec 2018 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/developing-react-custom-hooks-for-redux-without-react-redux/</guid>
      <description>Background Ever since I learned Redux, I&amp;rsquo;ve been thinking an alternative integration of react and redux to the official react-redux library. The intuition behind it is that Redux is super simple which I like a lot, whereas react-redux is complex because of performance tuning. If you are developing a business product, the official react-redux is to go without a doubt, but if you are playing with creating a toy app or you are just starting learning Redux, you might want something more straightforward.</description>
    </item>
    
    <item>
      <title>A deadly simple React bindings library for Redux with Hooks API</title>
      <link>https://blog.axlight.com/posts/a-deadly-simple-react-bindings-library-for-redux-with-hooks-api/</link>
      <pubDate>Fri, 16 Nov 2018 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/a-deadly-simple-react-bindings-library-for-redux-with-hooks-api/</guid>
      <description>There is a follow-up article which describes the implementation details of this library. Please visit here.
 Redux is one of the popular libraries for React. Although Redux itself is not tied to React, it&amp;rsquo;s often used with the official bindings react-redux that allows to connect Redux state to any React components.
In this article, we propose another bindings library to combine React and Redux. This library tries to be simple and easy for beginners.</description>
    </item>
    
    <item>
      <title>React Hooks Tutorial on pure useReducer &#43; useContext for global state like Redux and comparison with react-hooks-global-state</title>
      <link>https://blog.axlight.com/posts/react-hooks-tutorial-for-pure-usereducer-usecontext-for-global-state-like-redux-and-comparison/</link>
      <pubDate>Fri, 09 Nov 2018 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/react-hooks-tutorial-for-pure-usereducer-usecontext-for-global-state-like-redux-and-comparison/</guid>
      <description>In this article, I will first explain minimal code to implement global state with useReducer and useContext which are called &amp;ldquo;hooks&amp;rdquo; that will be available in React 16.7. I will then compare it with react-hooks-global-state which is a tiny library that I&amp;rsquo;ve been developing for global state management primarily for small applications.
Note: Global state is convenient for sharing values among components far apart in the component tree, but it shouldn&amp;rsquo;t be abused because it would limit the reusability.</description>
    </item>
    
    <item>
      <title>React global state by Context API for TypeScript</title>
      <link>https://blog.axlight.com/posts/react-global-state-by-context-api-for-typescript/</link>
      <pubDate>Thu, 08 Nov 2018 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/react-global-state-by-context-api-for-typescript/</guid>
      <description>Note: this post has nothing to do with React Hooks API.
In my previous post, I introduced a library called react-context-global-state. After a while, I have better knowlege of TypeScript (yes, I&amp;rsquo;m a beginner!), and come up with fairly good type definitions. I just released a new version.
https://www.npmjs.com/package/react-context-global-state
Example code in TypeScript Let me breifly show how the code looks like in TypeScript.
In a file named state.ts, we define a global state and export function components.</description>
    </item>
    
    <item>
      <title>Redux middleware compatible React Hooks library for easy global state management</title>
      <link>https://blog.axlight.com/posts/redux-middleware-compatible-react-hooks-library-for-easy-global-state-management/</link>
      <pubDate>Wed, 07 Nov 2018 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/redux-middleware-compatible-react-hooks-library-for-easy-global-state-management/</guid>
      <description>The library I&amp;rsquo;ve been developing a library to make use of React Hooks API. The library is for global state mangement with the aim to use it instead of Redux, especially for smaller applications. See the repository for more information and the source code.
https://github.com/dai-shi/react-hooks-global-state
Please also check out my previous posts [1] [2].
Support for Redux middleware Originally, the library was extending useState for global state. Later, reducer is supported.</description>
    </item>
    
    <item>
      <title>An alternative to React Redux by React Hooks API (For both JavaScript and TypeScript)</title>
      <link>https://blog.axlight.com/posts/an-alternative-to-react-redux-by-react-hooks-api-for-both-javascript-and-typescript/</link>
      <pubDate>Sun, 04 Nov 2018 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/an-alternative-to-react-redux-by-react-hooks-api-for-both-javascript-and-typescript/</guid>
      <description>Motivation Everyone is excited about the new React Hooks API. So am I. Having been thinking how to manage global state, the Hooks API seems promising. By the way, I like Redux a lot, but I don&amp;rsquo;t like react-redux a.k.a connect very much. It is too complicated for beginners to use it properly. For example, reselect / memoization is a hard concept to explain. My recommendation is to structure a global state so that mapStateToProps only needs to select a part of the state without any logic.</description>
    </item>
    
    <item>
      <title>TypeScript-aware React hooks for global state</title>
      <link>https://blog.axlight.com/posts/typescript-aware-react-hooks-for-global-state/</link>
      <pubDate>Sun, 28 Oct 2018 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/typescript-aware-react-hooks-for-global-state/</guid>
      <description>React Hooks API is a new proposal for React v16.7. It enables writing all components as functions with full functionality. You can develop &amp;ldquo;custom hooks&amp;rdquo; to add a new functionality. Although it&amp;rsquo;s not released yet, I would like to introduce a new library to support global state. Note that it&amp;rsquo;s still an experiment.
The library It&amp;rsquo;s called &amp;ldquo;react-hooks-global-state&amp;rdquo; and is available in npm. Please also checkout the GitHub repository.</description>
    </item>
    
    <item>
      <title>React global state by Context API</title>
      <link>https://blog.axlight.com/posts/react-global-state-by-context-api/</link>
      <pubDate>Fri, 05 Oct 2018 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/react-global-state-by-context-api/</guid>
      <description>I had been trying to find a way to use React without using class. Redux is one solution to achieve this. Although I love the idea of writing everthing in pure functions, Redux is sometimes not suitable for small apps. React v16.3 introduced new Context API officially. Since then, several ideas were proposed to use it for managing global state. So far, I wasn&amp;rsquo;t able to find something I really liked, hence I made a new one.</description>
    </item>
    
  </channel>
</rss>
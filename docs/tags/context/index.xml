<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>context on Daishi Kato&#39;s blog</title>
    <link>https://blog.axlight.com/tags/context/</link>
    <description>Recent content in context on Daishi Kato&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 Jun 2019 23:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://blog.axlight.com/tags/context/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Redux-less context-based useSelector hook that has same performance as React-Redux</title>
      <link>https://blog.axlight.com/posts/benchmark-react-tracked/</link>
      <pubDate>Sun, 16 Jun 2019 23:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/benchmark-react-tracked/</guid>
      <description>Introduction React-Redux provides hooks API with nice abstraction. Especially, useSelector is probaly less missused than mapStateToProps.
react-tracked is a library for global state without Redux. This library provides almost compatible hooks API to React-Redux. It&amp;rsquo;s developed with performance in mind, and it should be as performant as React-Redux, even though it utilizes only React context. See the GitHub repo for more information.
https://github.com/dai-shi/react-tracked
This post shows benchmark results to convince that it actually is performant in one scenario.</description>
    </item>
    
    <item>
      <title>Super performant global state with React context and hooks</title>
      <link>https://blog.axlight.com/posts/super-performant-global-state-with-react-context-and-hooks/</link>
      <pubDate>Sat, 15 Jun 2019 23:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/super-performant-global-state-with-react-context-and-hooks/</guid>
      <description>Introduction There are many libraries to provide global state in React. React itself doesn&amp;rsquo;t provide such a feature, probably because separation of concerns is important and having global state naively is not idiomatic. However, in certain cases, having global state is good as long as it&amp;rsquo;s properly implemented. It&amp;rsquo;s likely that performance drops down compared to using non-global state (incl. multiple contexts).
This post introduces a library for global state with performance.</description>
    </item>
    
    <item>
      <title>Four patterns for global state with React hooks: Context or Redux</title>
      <link>https://blog.axlight.com/posts/four-patterns-for-global-state-with-react-hooks-context-or-redux/</link>
      <pubDate>Mon, 27 May 2019 00:50:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/four-patterns-for-global-state-with-react-hooks-context-or-redux/</guid>
      <description>Introduction Global state or shared state is one of the biggest issues when you start developing a React app. Should we use Redux? Do hooks provide a Redux-like solution? I would like to show four patterns toward using Redux. This is my personal opinion and mainly for new apps.
Pattern 1: Prop passing Some might think it wouldn&amp;rsquo;t scale, but the most basic pattern should still be prop passing. If the app is small enough, define local state in a parent component and simply pass it down to child components.</description>
    </item>
    
    <item>
      <title>A thought on React Context default value</title>
      <link>https://blog.axlight.com/posts/a-thought-on-react-context-default-value/</link>
      <pubDate>Fri, 11 Jan 2019 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/a-thought-on-react-context-default-value/</guid>
      <description>Introduction It&amp;rsquo;s been about a year since React Context API is out. This is powerful and it&amp;rsquo;s even more powerful with upcoming React Hooks API, namely useContext. Please check out official documents to learn them in detail.
https://reactjs.org/docs/context.html
https://reactjs.org/docs/hooks-intro.html
Now, this very short article is just about the default value of a context. When you create a context, you pass a default value in the first argument.
 The defaultValue argument is only used when a component does not have a matching Provider above it in the tree.</description>
    </item>
    
    <item>
      <title>React global state by Context API for TypeScript</title>
      <link>https://blog.axlight.com/posts/react-global-state-by-context-api-for-typescript/</link>
      <pubDate>Thu, 08 Nov 2018 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/react-global-state-by-context-api-for-typescript/</guid>
      <description>Note: this post has nothing to do with React Hooks API.
In my previous post, I introduced a library called react-context-global-state. After a while, I have better knowlege of TypeScript (yes, I&amp;rsquo;m a beginner!), and come up with fairly good type definitions. I just released a new version.
https://www.npmjs.com/package/react-context-global-state
Example code in TypeScript Let me breifly show how the code looks like in TypeScript.
In a file named state.ts, we define a global state and export function components.</description>
    </item>
    
    <item>
      <title>React global state by Context API</title>
      <link>https://blog.axlight.com/posts/react-global-state-by-context-api/</link>
      <pubDate>Fri, 05 Oct 2018 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/react-global-state-by-context-api/</guid>
      <description>I had been trying to find a way to use React without using class. Redux is one solution to achieve this. Although I love the idea of writing everthing in pure functions, Redux is sometimes not suitable for small apps. React v16.3 introduced new Context API officially. Since then, several ideas were proposed to use it for managing global state. So far, I wasn&amp;rsquo;t able to find something I really liked, hence I made a new one.</description>
    </item>
    
  </channel>
</rss>
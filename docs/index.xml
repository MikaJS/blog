<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daishi Kato&#39;s blog</title>
    <link>https://blog.axlight.com/</link>
    <description>Recent content on Daishi Kato&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 31 Dec 2018 12:00:00 +0900</lastBuildDate>
    
	<atom:link href="https://blog.axlight.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Developing React custom hooks for abortable async functions with AbortController</title>
      <link>https://blog.axlight.com/posts/developing-react-custom-hooks-for-abortable-async-functions-with-abortcontroller/</link>
      <pubDate>Mon, 31 Dec 2018 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/developing-react-custom-hooks-for-abortable-async-functions-with-abortcontroller/</guid>
      <description>In my previous article, I introduced how the custom hook useAsyncTask handles async functions with AbortController and demonstrated a typeahead search example. In this article, I explain about the implementation of useAsyncTask.
Recap JavaScript promise is not abortable. The fetch API is based on promise, and hence you can&amp;rsquo;t cancel it in pure JavaScript. To cancel fetch, the DOM spec introduced AbortController. The AbortController is a general interface and not specific to fetch.</description>
    </item>
    
    <item>
      <title>Injecting a client-side script in GraphQL Playground in Apollo Server</title>
      <link>https://blog.axlight.com/posts/injecting-a-client-side-script-in-graphql-playground-in-apollo-server/</link>
      <pubDate>Sat, 22 Dec 2018 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/injecting-a-client-side-script-in-graphql-playground-in-apollo-server/</guid>
      <description>This is a short article to explain how I inject a client-side script in Playground. Note that this is a workaround solution until I find a better way.
Background When developing a GraphQL server with Apollo Server, GraphQL Playground is a tool that you are likely to use. Now, suppose we have an Apollo server that authenticates with a token in an HTTP header. Luckily, Playground has an editor to specify HTTP headers.</description>
    </item>
    
    <item>
      <title>Developing React custom hooks for Redux without react-redux</title>
      <link>https://blog.axlight.com/posts/developing-react-custom-hooks-for-redux-without-react-redux/</link>
      <pubDate>Fri, 14 Dec 2018 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/developing-react-custom-hooks-for-redux-without-react-redux/</guid>
      <description>Background Ever since I learned Redux, I&amp;rsquo;ve been thinking an alternative integration of react and redux to the official react-redux library. The intuition behind it is that Redux is super simple which I like a lot, whereas react-redux is complex because of performance tuning. If you are developing a business product, the official react-redux is to go without a doubt, but if you are playing with creating a toy app or you are just starting learning Redux, you might want something more straightforward.</description>
    </item>
    
    <item>
      <title>Introduction to abortable async functions for React with hooks</title>
      <link>https://blog.axlight.com/posts/introduction-to-abortable-async-functions-for-react-with-hooks/</link>
      <pubDate>Tue, 11 Dec 2018 10:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/introduction-to-abortable-async-functions-for-react-with-hooks/</guid>
      <description>There is a follow-up article which describes the implementation details of the library. Please visit here.
 TL;DR Just visit the example in codesandbox and try it.
Background You can&amp;rsquo;t cancel promises in JavaScript and that&amp;rsquo;s one of the reason why libraries such as redux-saga and redux-observables are popular because they allow cancellation. While they are good solutions as well as Redux is, there might be a case when you want just a cancellation mechanism for a promise, not the entire framework.</description>
    </item>
    
    <item>
      <title>Creating a Minimal Expo React Native Project with TypeScript and Jest</title>
      <link>https://blog.axlight.com/posts/creating-a-minimal-expo-react-native-project-with-typescript-and-jest/</link>
      <pubDate>Sat, 01 Dec 2018 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/creating-a-minimal-expo-react-native-project-with-typescript-and-jest/</guid>
      <description>This article shows the steps to create a minimal Expo project. The project uses TypeScript and Jest. Note that this procedure is based on Expo SDK31 and may be invalid in the future.
Install Expo CLI As described in the official doc, let&amp;rsquo;s install the CLI tool.
$ npm install -g expo-cli  Note: I prefer using npx and I use npx in my project, but expo-cli depends on @expo/dev-tools which depends on old graphql.</description>
    </item>
    
    <item>
      <title>React Hooks Tutorial on Developing a Custom Hook for Data Fetching</title>
      <link>https://blog.axlight.com/posts/react-hooks-tutorial-on-developing-a-custom-hook-for-data-fetching/</link>
      <pubDate>Thu, 29 Nov 2018 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/react-hooks-tutorial-on-developing-a-custom-hook-for-data-fetching/</guid>
      <description>Introduction React Hooks are a new feature coming in React 16.7. It allows us to write stateful function components that were impossible before without class components. The official docs are must-read, so check them out if you haven&amp;rsquo;t.
https://reactjs.org/docs/hooks-intro.html
Besides stateful function components, this new feature allow us to build a custom hook to share logic between components. This has been possible with High-order Components (HoCs), and although there&amp;rsquo;s technically no difference what hooks can achieve, hooks simplify it a lot and reduce so called &amp;ldquo;wrapper hell&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>A deadly simple React bindings library for Redux with Hooks API</title>
      <link>https://blog.axlight.com/posts/a-deadly-simple-react-bindings-library-for-redux-with-hooks-api/</link>
      <pubDate>Fri, 16 Nov 2018 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/a-deadly-simple-react-bindings-library-for-redux-with-hooks-api/</guid>
      <description>There is a follow-up article which describes the implementation details of this library. Please visit here.
 Redux is one of the popular libraries for React. Although Redux itself is not tied to React, it&amp;rsquo;s often used with the official bindings react-redux that allows to connect Redux state to any React components.
In this article, we propose another bindings library to combine React and Redux. This library tries to be simple and easy for beginners.</description>
    </item>
    
    <item>
      <title>React Hooks Tutorial on pure useReducer &#43; useContext for global state like Redux and comparison with react-hooks-global-state</title>
      <link>https://blog.axlight.com/posts/react-hooks-tutorial-for-pure-usereducer-usecontext-for-global-state-like-redux-and-comparison/</link>
      <pubDate>Fri, 09 Nov 2018 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/react-hooks-tutorial-for-pure-usereducer-usecontext-for-global-state-like-redux-and-comparison/</guid>
      <description>In this article, I will first explain minimal code to implement global state with useReducer and useContext which are called &amp;ldquo;hooks&amp;rdquo; that will be available in React 16.7. I will then compare it with react-hooks-global-state which is a tiny library that I&amp;rsquo;ve been developing for global state management primarily for small applications.
Note: Global state is convenient for sharing values among components far apart in the component tree, but it shouldn&amp;rsquo;t be abused because it would limit the reusability.</description>
    </item>
    
    <item>
      <title>React global state by Context API for TypeScript</title>
      <link>https://blog.axlight.com/posts/react-global-state-by-context-api-for-typescript/</link>
      <pubDate>Thu, 08 Nov 2018 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/react-global-state-by-context-api-for-typescript/</guid>
      <description>Note: this post has nothing to do with React Hooks API.
In my previous post, I introduced a library called react-context-global-state. After a while, I have better knowlege of TypeScript (yes, I&amp;rsquo;m a beginner!), and come up with fairly good type definitions. I just released a new version.
https://www.npmjs.com/package/react-context-global-state
Example code in TypeScript Let me breifly show how the code looks like in TypeScript.
In a file named state.ts, we define a global state and export function components.</description>
    </item>
    
    <item>
      <title>Redux middleware compatible React Hooks library for easy global state management</title>
      <link>https://blog.axlight.com/posts/redux-middleware-compatible-react-hooks-library-for-easy-global-state-management/</link>
      <pubDate>Wed, 07 Nov 2018 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/redux-middleware-compatible-react-hooks-library-for-easy-global-state-management/</guid>
      <description>The library I&amp;rsquo;ve been developing a library to make use of React Hooks API. The library is for global state mangement with the aim to use it instead of Redux, especially for smaller applications. See the repository for more information and the source code.
https://github.com/dai-shi/react-hooks-global-state
Please also check out my previous posts [1] [2].
Support for Redux middleware Originally, the library was extending useState for global state. Later, reducer is supported.</description>
    </item>
    
    <item>
      <title>An alternative to React Redux by React Hooks API (For both JavaScript and TypeScript)</title>
      <link>https://blog.axlight.com/posts/an-alternative-to-react-redux-by-react-hooks-api-for-both-javascript-and-typescript/</link>
      <pubDate>Sun, 04 Nov 2018 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/an-alternative-to-react-redux-by-react-hooks-api-for-both-javascript-and-typescript/</guid>
      <description>Motivation Everyone is excited about the new React Hooks API. So am I. Having been thinking how to manage global state, the Hooks API seems promising. By the way, I like Redux a lot, but I don&amp;rsquo;t like react-redux a.k.a connect very much. It is too complicated for beginners to use it properly. For example, reselect / memoization is a hard concept to explain. My recommendation is to structure a global state so that mapStateToProps only needs to select a part of the state without any logic.</description>
    </item>
    
    <item>
      <title>TypeScript-aware React hooks for global state</title>
      <link>https://blog.axlight.com/posts/typescript-aware-react-hooks-for-global-state/</link>
      <pubDate>Sun, 28 Oct 2018 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/typescript-aware-react-hooks-for-global-state/</guid>
      <description>React Hooks API is a new proposal for React v16.7. It enables writing all components as functions with full functionality. You can develop &amp;ldquo;custom hooks&amp;rdquo; to add a new functionality. Although it&amp;rsquo;s not released yet, I would like to introduce a new library to support global state. Note that it&amp;rsquo;s still an experiment.
The library It&amp;rsquo;s called &amp;ldquo;react-hooks-global-state&amp;rdquo; and is available in npm. Please also checkout the GitHub repository.</description>
    </item>
    
    <item>
      <title>Clean Expo (React Native) &#43; React Apollo (GraphQL) &#43; TypeScript boilerplate</title>
      <link>https://blog.axlight.com/posts/clean-expo-react-native-react-apollo-graphql-typescript-boilerplate/</link>
      <pubDate>Sat, 20 Oct 2018 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/clean-expo-react-native-react-apollo-graphql-typescript-boilerplate/</guid>
      <description>Motivation Have you heard of React Native, GraphQL and TypeScript? I&amp;rsquo;m looking for a easy and nice tech stack to develop mobile apps. These three may fit nicely for developing mobile apps for beginners up to intermediates. More precisely, Expo is chosen for building React Native development environment, and React Apollo is for GraphQL. These libraries comes with type annotations, which allow us to code in TypeScript. By &amp;ldquo;Clean&amp;rdquo; I mean not only the boilerplate is minimalistic, but also we don&amp;rsquo;t allow &amp;ldquo;any&amp;rdquo; types.</description>
    </item>
    
    <item>
      <title>React global state by Context API</title>
      <link>https://blog.axlight.com/posts/react-global-state-by-context-api/</link>
      <pubDate>Fri, 05 Oct 2018 12:00:00 +0900</pubDate>
      
      <guid>https://blog.axlight.com/posts/react-global-state-by-context-api/</guid>
      <description>I had been trying to find a way to use React without using class. Redux is one solution to achieve this. Although I love the idea of writing everthing in pure functions, Redux is sometimes not suitable for small apps. React v16.3 introduced new Context API officially. Since then, several ideas were proposed to use it for managing global state. So far, I wasn&amp;rsquo;t able to find something I really liked, hence I made a new one.</description>
    </item>
    
  </channel>
</rss>